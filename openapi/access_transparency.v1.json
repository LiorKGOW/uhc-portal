{
  "components": {
    "parameters": {
      "access_request_id": {
        "description": "The access request id of record",
        "in": "path",
        "name": "access_request_id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "clusterId": {
        "description": "Supplies a cluster ID to fetch access protection status",
        "in": "query",
        "name": "clusterId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Supplies a comma-separated list of fields to be returned.\nFields of sub-structures and of arrays use <structure>.<field> notation.\n<stucture>.* means all field of a structure\nExample: For each Subscription to get id, href, plan(id and kind) and labels (all fields)\n\n```\nocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true\n```",
        "in": "query",
        "name": "fields",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "description": "The id of record",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "orderBy": {
        "description": "Specifies the order by criteria. The syntax of this parameter is\nsimilar to the syntax of the _order by_ clause of an SQL statement,\nbut using the names of the json attributes / column of the account.\nFor example, in order to retrieve all accounts ordered by username:\n\n```sql\nusername asc\n```\n\nOr in order to retrieve all accounts ordered by username _and_ first name:\n\n```sql\nusername asc, firstName asc\n```\n\nIf the parameter isn't provided, or if the value is empty, then\nno explicit ordering will be applied.",
        "in": "query",
        "name": "orderBy",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "organizationId": {
        "description": "Supplies an organization ID to fetch access protection status",
        "in": "query",
        "name": "organizationId",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "description": "Page number of record list when record list exceeds specified page size",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "default": 1,
          "minimum": 1,
          "type": "integer"
        }
      },
      "search": {
        "description": "Specifies the search criteria. The syntax of this parameter is\nsimilar to the syntax of the _where_ clause of an SQL statement,\nusing the names of the json attributes / column names of the account. \nFor example, in order to retrieve all the accounts with a username\nstarting with `my`:\n\n```sql\nusername like 'my%'\n```\n\nThe search criteria can also be applied on related resource.\nFor example, in order to retrieve all the subscriptions labeled by `foo=bar`,\n\n```sql\nsubscription_labels.key = 'foo' and subscription_labels.value = 'bar'\n```\n\nIf the parameter isn't provided, or if the value is empty, then\nall the accounts that the user has permission to see will be\nreturned.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "size": {
        "description": "Maximum number of records to return",
        "in": "query",
        "name": "size",
        "required": false,
        "schema": {
          "default": 100,
          "minimum": 0,
          "type": "integer"
        }
      },
      "subscriptionId": {
        "description": "Supplies a subscription ID to fetch access protection status",
        "in": "query",
        "name": "subscriptionId",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "AccessProtection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "properties": {
              "enabled": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccessRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "properties": {
              "cluster_id": {
                "type": "string"
              },
              "deadline": {
                "description": "How long the Access Request can be in pending state waiting for a customer decision",
                "example": "9h2m3s",
                "type": "string"
              },
              "deadlineAt": {
                "format": "date-time",
                "type": "string"
              },
              "decisions": {
                "items": {
                  "$ref": "#/components/schemas/Decision"
                },
                "type": "array"
              },
              "duration": {
                "description": "How long the access will last after it's been approved",
                "example": "9h2m3s",
                "type": "string"
              },
              "internal_support_case_id": {
                "description": "The Jira ticket associated with this Access Request in the form 'OHSS-1234'. The Jira issue must already exist.",
                "type": "string"
              },
              "justification": {
                "type": "string"
              },
              "organization_id": {
                "type": "string"
              },
              "requested_by": {
                "type": "string"
              },
              "status": {
                "properties": {
                  "expires_at": {
                    "format": "date-time",
                    "type": "string"
                  },
                  "state": {
                    "default": "Pending",
                    "enum": [
                      "Pending",
                      "Denied",
                      "Approved",
                      "Expired"
                    ],
                    "type": "string"
                  }
                }
              },
              "subscription_id": {
                "type": "string"
              },
              "support_case_id": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccessRequestList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/AccessRequest"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "AccessRequestPostRequest": {
        "properties": {
          "cluster_id": {
            "description": "When supplying cluster id the subscription is not required",
            "type": "string"
          },
          "deadline": {
            "default": "72h",
            "example": "9h2m3s",
            "type": "string"
          },
          "duration": {
            "default": "8h",
            "example": "9h2m3s",
            "type": "string"
          },
          "internal_support_case_id": {
            "type": "string"
          },
          "justification": {
            "type": "string"
          },
          "subscription_id": {
            "description": "When supplying subscription the cluster id is not required",
            "type": "string"
          },
          "support_case_id": {
            "type": "string"
          }
        },
        "required": [
          "justification",
          "internal_support_case_id"
        ],
        "type": "object"
      },
      "Decision": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "properties": {
              "decided_by": {
                "type": "string"
              },
              "decision": {
                "enum": [
                  "Approved",
                  "Denied",
                  "Expired"
                ],
                "type": "string"
              },
              "justification": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "DecisionList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Decision"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "Error": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "properties": {
              "code": {
                "type": "string"
              },
              "operation_id": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "ErrorList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/Error"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "List": {
        "properties": {
          "kind": {
            "type": "string"
          },
          "page": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "required": [
          "kind",
          "page",
          "size",
          "total",
          "items"
        ],
        "type": "object"
      },
      "ObjectReference": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "description": "access-transparency-service Service API",
    "title": "access-transparency-service Service API",
    "version": "0.0.1"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/access_transparency/v1/access_protection": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessProtection"
                }
              }
            },
            "description": "An access protection object"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns the status of an access protection determined by the organization or subscription"
      }
    },
    "/api/access_transparency/v1/access_requests": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/organizationId"
          },
          {
            "$ref": "#/components/parameters/subscriptionId"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequestList"
                }
              }
            },
            "description": "A JSON array of access request objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of access requests"
      },
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessRequestPostRequest"
              }
            }
          },
          "description": "AccessRequest data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequest"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "AccessRequest already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An unexpected error occurred creating the accessrequest"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new access request"
      }
    },
    "/api/access_transparency/v1/access_requests/{access_request_id}/decisions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/access_request_id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/search"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecisionList"
                }
              }
            },
            "description": "A JSON array of decision objects"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Returns a list of decisions from a given access request"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/access_request_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Decision"
              }
            }
          },
          "description": "Decision data",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Decision"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Validation errors occurred"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Decision already exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "An unexpected error occurred creating the decision"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Create a new decision for a given access request"
      }
    },
    "/api/access_transparency/v1/access_requests/{access_request_id}/decisions/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Decision"
                }
              }
            },
            "description": "Decision found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No decision with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get a decision by id for a given access request"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/access_request_id"
        },
        {
          "$ref": "#/components/parameters/id"
        }
      ]
    },
    "/api/access_transparency/v1/access_requests/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessRequest"
                }
              }
            },
            "description": "AccessRequest found by id"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized to perform operation"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "No access request with specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Get an access request by id"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ]
    }
  },
  "servers": [
    {
      "description": "current domain",
      "url": "http://localhost:8000"
    },
    {
      "description": "Main (production) server",
      "url": "https://api.openshift.com"
    },
    {
      "description": "Staging server",
      "url": "https://api.stage.openshift.com"
    }
  ]
}
