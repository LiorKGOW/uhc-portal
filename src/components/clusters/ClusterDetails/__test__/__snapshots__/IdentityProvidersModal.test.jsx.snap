// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ClusterCredentialsModal /> doesn't render when closed 1`] = `""`;

exports[`<ClusterCredentialsModal /> renders correctly 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  bsSize="large"
  className="right-side-modal-pf"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <ModalHeader
    bsClass="modal-header"
    closeButton={false}
    closeLabel="Close"
  >
    <ModalHeader
      onClose={[Function]}
      title="Create Identity Provider ()"
    />
  </ModalHeader>
  <ModalBody
    bsClass="modal-body"
    componentClass="div"
  >
    <Form
      bsClass="form"
      componentClass="form"
      horizontal={false}
      inline={false}
    >
      <Grid
        bsClass="container"
        componentClass="div"
        fluid={false}
      >
        <Row
          bsClass="row"
          componentClass="div"
        >
          <h4>
            Identity providers determine how users log into the cluster. Add an identity provider by selecting a type from the dropdown
             
            <br />
             
            below.
          </h4>
        </Row>
        <Row
          bsClass="row"
          componentClass="div"
        >
          <h3>
            Step 1: Select identity providers type
          </h3>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <Field
              component={[Function]}
              label="Identity Provider"
              name="type"
              options={
                Array [
                  Object {
                    "name": "Github",
                    "value": "GithubIdentityProvider",
                  },
                ]
              }
            />
          </Col>
        </Row>
        <Row
          bsClass="row"
          componentClass="div"
        >
          <h3>
            Step 2: Enter Provider type information
          </h3>
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <Field
              component={[Function]}
              label="Name"
              name="name"
              placeholder="name"
              type="text"
              validate={[Function]}
            />
            <Field
              component={[Function]}
              label="Client ID"
              name="client_id"
              placeholder="Client ID"
              type="text"
              validate={[Function]}
            />
            <Field
              component={[Function]}
              label="Client Secret"
              name="client_secret"
              placeholder="Client Secret"
              type="password"
              validate={[Function]}
            />
          </Col>
          <Col
            bsClass="col"
            componentClass="div"
            sm={4}
          >
            <HintBlock
              body={
                <React.Fragment>
                  <p>
                    Learn more about identity providers in the OpenShift documentation.
                  </p>
                  <p>
                    <a
                      href="https://docs.openshift.com/enterprise/3.0/admin_guide/configuring_authentication.html"
                      target="_blank"
                    >
                      Learn more
                    </a>
                  </p>
                </React.Fragment>
              }
              buttonContent={null}
              className=""
              onButtonClick={[Function]}
              onClose={null}
              title="Learn more about ClientID and and Client Secret"
            />
          </Col>
        </Row>
        <Row
          bsClass="row"
          componentClass="div"
        >
          <ExpandCollapse
            align="left"
            bordered={true}
            className=""
            expanded={false}
            textCollapsed="Show Advanced Options"
            textExpanded="Hide Advanced Options"
          >
            <Col
              bsClass="col"
              componentClass="div"
              id="idp-advanced-options"
              sm={5}
            >
              <Field
                component={[Function]}
                label="Hostname"
                name="hostname"
                placeholder="hostname"
                type="text"
              />
              <Field
                component={[Function]}
                label="Organizations"
                name="organizations"
                placeholder="comma separated, example: 'org1,org2,org3"
                type="text"
              />
              <Field
                component={[Function]}
                label="Teams"
                name="teams"
                placeholder="comma separated, example: 'team1,team2"
                type="text"
              />
              <Field
                component={[Function]}
                label="Mapping Method"
                name="mappingMethod"
                options={
                  Array [
                    Object {
                      "name": "claim",
                      "value": "claim",
                    },
                    Object {
                      "name": "lookup",
                      "value": "lookup",
                    },
                    Object {
                      "name": "generate",
                      "value": "generate",
                    },
                    Object {
                      "name": "add",
                      "value": "add",
                    },
                  ]
                }
              />
              <Field
                component={[Function]}
                label="Challenge"
                name="challenge"
              />
              <Field
                component={[Function]}
                label="Login"
                name="login"
              />
            </Col>
          </ExpandCollapse>
        </Row>
      </Grid>
    </Form>
  </ModalBody>
  <ModalFooter
    bsClass="modal-footer"
    componentClass="div"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="primary"
      disabled={false}
      onClick={[MockFunction]}
      type="submit"
    >
      Create
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      disabled={false}
      onClick={[Function]}
    >
      Cancel
    </Button>
  </ModalFooter>
</Modal>
`;
