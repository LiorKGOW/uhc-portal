// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MachineTypeSelection /> when machine type list needs to be fetched renders correctly 1`] = `
<MachineTypeSelection
  getMachineTypes={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  input={
    Object {
      "onChange": [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  isMultiAz={false}
  machineTypes={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "machineTypes": Array [],
      "pending": false,
    }
  }
  meta={Object {}}
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading node types...
  </div>
</MachineTypeSelection>
`;

exports[`<MachineTypeSelection /> when the machine types list is available renders correctly 1`] = `
<MachineTypeSelection
  getMachineTypes={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction] {
        "calls": Array [
          Array [
            "r5.xlarge",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  isMultiAz={true}
  machineTypes={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": true,
      "machineTypes": Array [],
      "pending": false,
      "types": Array [
        Object {
          "cloud_provider": Object {
            "href": "/api/clusters_mgmt/v1/cloud_providers/aws",
            "id": "aws",
            "kind": "CloudProviderLink",
          },
          "cpu": Object {
            "unit": "vCPU",
            "value": 4,
          },
          "href": "/api/clusters_mgmt/v1/machine_types/r5.xlarge",
          "id": "r5.xlarge",
          "kind": "MachineType",
          "memory": Object {
            "unit": "B",
            "value": 34359738368,
          },
          "name": "Memory optimized - R5.XLarge",
        },
        Object {
          "cloud_provider": Object {
            "href": "/api/clusters_mgmt/v1/cloud_providers/aws",
            "id": "aws",
            "kind": "CloudProviderLink",
          },
          "cpu": Object {
            "unit": "vCPU",
            "value": 16,
          },
          "href": "/api/clusters_mgmt/v1/machine_types/r5.4xlarge",
          "id": "r5.4xlarge",
          "kind": "MachineType",
          "memory": Object {
            "unit": "B",
            "value": 137438953472,
          },
          "name": "Memory optimized - R5.4XLarge",
        },
      ],
    }
  }
  meta={Object {}}
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={
    Object {
      "clusterQuota": Object {
        "rhInfra": Object {
          "multiAz": Object {
            "r5.xlarge": 5,
          },
          "singleAz": Object {
            "r5.xlarge": 0,
          },
        },
      },
    }
  }
>
  <div
    className="flat-radio-buttons-flex-container"
  >
    <FlatRadioButton
      icon={
        <MemoryIcon
          color="currentColor"
          noVerticalAlign={false}
          size="lg"
          title={null}
        />
      }
      id="machineTypeRadio.r5.xlarge"
      isDisabled={false}
      isSelected={true}
      key="r5.xlarge"
      onChange={[Function]}
      secondaryText="Memory optimized - R5.XLarge"
      titleText="4 vCPU 32 GiB RAM"
      tooltip={false}
      value="r5.xlarge"
    >
      <Component
        className="ocm-flat-radio-button selected"
        id="machineTypeRadio.r5.xlarge"
        isDisabled={false}
        onClick={[Function]}
        variant="tertiary"
      >
        <ComponentWithOuia
          component={[Function]}
          componentProps={
            Object {
              "children": <Split
                gutter="sm"
              >
                <SplitItem
                  className="ocm-flat-button-icon"
                >
                  <MemoryIcon
                    color="currentColor"
                    noVerticalAlign={false}
                    size="lg"
                    title={null}
                  />
                </SplitItem>
                <SplitItem
                  isFilled={true}
                >
                  <Title
                    headingLevel="h4"
                    size="lg"
                  >
                    4 vCPU 32 GiB RAM
                  </Title>
                  Memory optimized - R5.XLarge
                </SplitItem>
              </Split>,
              "className": "ocm-flat-radio-button selected",
              "id": "machineTypeRadio.r5.xlarge",
              "isDisabled": false,
              "onClick": [Function],
              "variant": "tertiary",
            }
          }
          consumerContext={null}
        >
          <Button
            className="ocm-flat-radio-button selected"
            id="machineTypeRadio.r5.xlarge"
            isDisabled={false}
            onClick={[Function]}
            ouiaContext={
              Object {
                "isOuia": false,
                "ouiaId": null,
              }
            }
            variant="tertiary"
          >
            <button
              aria-disabled={null}
              aria-label={null}
              className="pf-c-button pf-m-tertiary ocm-flat-radio-button selected"
              disabled={false}
              id="machineTypeRadio.r5.xlarge"
              onClick={[Function]}
              tabIndex={null}
              type="button"
            >
              <Split
                gutter="sm"
              >
                <div
                  className="pf-l-split pf-m-gutter"
                >
                  <SplitItem
                    className="ocm-flat-button-icon"
                  >
                    <div
                      className="pf-l-split__item ocm-flat-button-icon"
                    >
                      <MemoryIcon
                        color="currentColor"
                        noVerticalAlign={false}
                        size="lg"
                        title={null}
                      >
                        <svg
                          aria-hidden={true}
                          aria-labelledby={null}
                          fill="currentColor"
                          height="2em"
                          role="img"
                          style={
                            Object {
                              "verticalAlign": "-0.25em",
                            }
                          }
                          viewBox="0 0 640 512"
                          width="2em"
                        >
                          <path
                            d="M640 130.94V96c0-17.67-14.33-32-32-32H32C14.33 64 0 78.33 0 96v34.94c18.6 6.61 32 24.19 32 45.06s-13.4 38.45-32 45.06V320h640v-98.94c-18.6-6.61-32-24.19-32-45.06s13.4-38.45 32-45.06zM224 256h-64V128h64v128zm128 0h-64V128h64v128zm128 0h-64V128h64v128zM0 448h64v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h64v-96H0v96z"
                            transform=""
                          />
                        </svg>
                      </MemoryIcon>
                    </div>
                  </SplitItem>
                  <SplitItem
                    isFilled={true}
                  >
                    <div
                      className="pf-l-split__item pf-m-fill"
                    >
                      <Title
                        headingLevel="h4"
                        size="lg"
                      >
                        <h4
                          className="pf-c-title pf-m-lg"
                        >
                          4 vCPU 32 GiB RAM
                        </h4>
                      </Title>
                      Memory optimized - R5.XLarge
                    </div>
                  </SplitItem>
                </div>
              </Split>
            </button>
          </Button>
        </ComponentWithOuia>
      </Component>
    </FlatRadioButton>
    <FlatRadioButton
      icon={
        <MemoryIcon
          color="currentColor"
          noVerticalAlign={false}
          size="lg"
          title={null}
        />
      }
      id="machineTypeRadio.r5.4xlarge"
      isDisabled={true}
      isSelected={false}
      key="r5.4xlarge"
      onChange={[Function]}
      secondaryText="Memory optimized - R5.4XLarge"
      titleText="16 vCPU 128 GiB RAM"
      tooltip="You do not have quota for this node type. Contact sales to purchase additional quota."
      value="r5.4xlarge"
    >
      <Tooltip
        appendTo={[Function]}
        aria="describedby"
        boundary="window"
        className=""
        content="You do not have quota for this node type. Contact sales to purchase additional quota."
        distance={15}
        enableFlip={true}
        entryDelay={500}
        exitDelay={500}
        flipBehavior={
          Array [
            "top",
            "right",
            "bottom",
            "left",
            "top",
            "right",
            "bottom",
          ]
        }
        id=""
        isAppLauncher={false}
        isContentLeftAligned={false}
        isVisible={false}
        maxWidth="18.75rem"
        position="top"
        tippyProps={Object {}}
        trigger="mouseenter focus"
        zIndex={9999}
      >
        <PopoverBase
          appendTo={[Function]}
          aria="describedby"
          arrow={true}
          boundary="window"
          content={
            <div
              className=""
              id=""
              role="tooltip"
            >
              <TooltipContent
                isLeftAligned={false}
              >
                You do not have quota for this node type. Contact sales to purchase additional quota.
              </TooltipContent>
            </div>
          }
          delay={
            Array [
              500,
              500,
            ]
          }
          distance={15}
          flip={true}
          flipBehavior={
            Array [
              "top",
              "right",
              "bottom",
              "left",
              "top",
              "right",
              "bottom",
            ]
          }
          isVisible={false}
          lazy={true}
          maxWidth="18.75rem"
          onCreate={[Function]}
          placement="top"
          popperOptions={
            Object {
              "modifiers": Object {
                "hide": Object {
                  "enabled": true,
                },
                "preventOverflow": Object {
                  "enabled": true,
                },
              },
            }
          }
          theme="pf-tooltip"
          trigger="mouseenter focus"
          zIndex={9999}
        >
          <div
            className="ocm-flat-radio-button-disabled"
          >
            <Component
              className="ocm-flat-radio-button"
              id="machineTypeRadio.r5.4xlarge"
              isDisabled={true}
              onClick={[Function]}
              variant="tertiary"
            >
              <ComponentWithOuia
                component={[Function]}
                componentProps={
                  Object {
                    "children": <Split
                      gutter="sm"
                    >
                      <SplitItem
                        className="ocm-flat-button-icon"
                      >
                        <MemoryIcon
                          color="currentColor"
                          noVerticalAlign={false}
                          size="lg"
                          title={null}
                        />
                      </SplitItem>
                      <SplitItem
                        isFilled={true}
                      >
                        <Title
                          headingLevel="h4"
                          size="lg"
                        >
                          16 vCPU 128 GiB RAM
                        </Title>
                        Memory optimized - R5.4XLarge
                      </SplitItem>
                    </Split>,
                    "className": "ocm-flat-radio-button",
                    "id": "machineTypeRadio.r5.4xlarge",
                    "isDisabled": true,
                    "onClick": [Function],
                    "variant": "tertiary",
                  }
                }
                consumerContext={null}
              >
                <Button
                  className="ocm-flat-radio-button"
                  id="machineTypeRadio.r5.4xlarge"
                  isDisabled={true}
                  onClick={[Function]}
                  ouiaContext={
                    Object {
                      "isOuia": false,
                      "ouiaId": null,
                    }
                  }
                  variant="tertiary"
                >
                  <button
                    aria-disabled={null}
                    aria-label={null}
                    className="pf-c-button pf-m-tertiary ocm-flat-radio-button"
                    disabled={true}
                    id="machineTypeRadio.r5.4xlarge"
                    onClick={[Function]}
                    tabIndex={null}
                    type="button"
                  >
                    <Split
                      gutter="sm"
                    >
                      <div
                        className="pf-l-split pf-m-gutter"
                      >
                        <SplitItem
                          className="ocm-flat-button-icon"
                        >
                          <div
                            className="pf-l-split__item ocm-flat-button-icon"
                          >
                            <MemoryIcon
                              color="currentColor"
                              noVerticalAlign={false}
                              size="lg"
                              title={null}
                            >
                              <svg
                                aria-hidden={true}
                                aria-labelledby={null}
                                fill="currentColor"
                                height="2em"
                                role="img"
                                style={
                                  Object {
                                    "verticalAlign": "-0.25em",
                                  }
                                }
                                viewBox="0 0 640 512"
                                width="2em"
                              >
                                <path
                                  d="M640 130.94V96c0-17.67-14.33-32-32-32H32C14.33 64 0 78.33 0 96v34.94c18.6 6.61 32 24.19 32 45.06s-13.4 38.45-32 45.06V320h640v-98.94c-18.6-6.61-32-24.19-32-45.06s13.4-38.45 32-45.06zM224 256h-64V128h64v128zm128 0h-64V128h64v128zm128 0h-64V128h64v128zM0 448h64v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h128v-26.67c0-8.84 7.16-16 16-16s16 7.16 16 16V448h64v-96H0v96z"
                                  transform=""
                                />
                              </svg>
                            </MemoryIcon>
                          </div>
                        </SplitItem>
                        <SplitItem
                          isFilled={true}
                        >
                          <div
                            className="pf-l-split__item pf-m-fill"
                          >
                            <Title
                              headingLevel="h4"
                              size="lg"
                            >
                              <h4
                                className="pf-c-title pf-m-lg"
                              >
                                16 vCPU 128 GiB RAM
                              </h4>
                            </Title>
                            Memory optimized - R5.4XLarge
                          </div>
                        </SplitItem>
                      </div>
                    </Split>
                  </button>
                </Button>
              </ComponentWithOuia>
            </Component>
          </div>
          <Portal
            containerInfo={
              <div>
                <div
                  class=""
                  id=""
                  role="tooltip"
                >
                  <div
                    class="pf-c-tooltip__content"
                  >
                    You do not have quota for this node type. Contact sales to purchase additional quota.
                  </div>
                </div>
              </div>
            }
          >
            <div
              className=""
              id=""
              role="tooltip"
            >
              <TooltipContent
                isLeftAligned={false}
              >
                <div
                  className="pf-c-tooltip__content"
                >
                  You do not have quota for this node type. Contact sales to purchase additional quota.
                </div>
              </TooltipContent>
            </div>
          </Portal>
        </PopoverBase>
      </Tooltip>
    </FlatRadioButton>
  </div>
</MachineTypeSelection>
`;

exports[`<MachineTypeSelection /> when the request is pending renders correctly 1`] = `
<MachineTypeSelection
  getMachineTypes={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  isMultiAz={false}
  machineTypes={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "pending": true,
      "types": Array [],
    }
  }
  meta={Object {}}
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading node types...
  </div>
</MachineTypeSelection>
`;

exports[`<MachineTypeSelection /> when there was an error renders correctly 1`] = `
<MachineTypeSelection
  getMachineTypes={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  input={
    Object {
      "onChange": [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
  isMultiAz={false}
  machineTypes={
    Object {
      "error": true,
      "errorMessage": "This is an error message",
      "fulfilled": false,
      "machineTypes": Array [],
      "pending": false,
    }
  }
  meta={Object {}}
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <ErrorBox
    message="Error loading node types"
    response={
      Object {
        "error": true,
        "errorMessage": "This is an error message",
        "fulfilled": false,
        "machineTypes": Array [],
        "pending": false,
      }
    }
  >
    <Component
      className="error-box"
      isInline={true}
      title="Error loading node types"
      variant="danger"
    >
      <ComponentWithOuia
        component={[Function]}
        componentProps={
          Object {
            "children": Array [
              <span>
                This is an error message
              </span>,
              Array [],
              <br />,
              <span>
                Operation ID: N/A
              </span>,
            ],
            "className": "error-box",
            "isInline": true,
            "title": "Error loading node types",
            "variant": "danger",
          }
        }
        consumerContext={null}
      >
        <Alert
          className="error-box"
          isInline={true}
          ouiaContext={
            Object {
              "isOuia": false,
              "ouiaId": null,
            }
          }
          title="Error loading node types"
          variant="danger"
        >
          <div
            aria-label="Danger Alert"
            className="pf-c-alert pf-m-inline pf-m-danger error-box"
          >
            <AlertIcon
              variant="danger"
            >
              <div
                className="pf-c-alert__icon"
              >
                <ExclamationCircleIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                  title={null}
                >
                  <svg
                    aria-hidden={true}
                    aria-labelledby={null}
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style={
                      Object {
                        "verticalAlign": "-0.125em",
                      }
                    }
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                      transform=""
                    />
                  </svg>
                </ExclamationCircleIcon>
              </div>
            </AlertIcon>
            <h4
              className="pf-c-alert__title"
            >
              <span
                className="pf-u-screen-reader"
              >
                Danger alert:
              </span>
              Error loading node types
            </h4>
            <div
              className="pf-c-alert__description"
            >
              <span>
                This is an error message
              </span>
              <br />
              <span>
                Operation ID: N/A
              </span>
            </div>
          </div>
        </Alert>
      </ComponentWithOuia>
    </Component>
  </ErrorBox>
</MachineTypeSelection>
`;
