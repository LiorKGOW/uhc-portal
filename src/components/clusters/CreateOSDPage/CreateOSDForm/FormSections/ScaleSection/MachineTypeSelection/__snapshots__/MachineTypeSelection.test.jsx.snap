// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<MachineTypeSelection /> when machine type list needs to be fetched renders correctly 1`] = `
<Fragment>
  <div
    className="spinner-fit-container"
  >
    <Spinner />
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading node types...
  </div>
</Fragment>
`;

exports[`<MachineTypeSelection /> when the machine types list is available byoc lacking enough byoc node quota renders correctly 1`] = `
<div>
  You do not have enough quota to create a cluster with the minimum required worker capacity. Contact sales to purchase additional quota.
</div>
`;

exports[`<MachineTypeSelection /> when the machine types list is available byoc with sufficient byoc quota available renders correctly 1`] = `
<FormGroup
  fieldId="node_type"
  isHelperTextBeforeField={true}
  isRequired={true}
  label="Compute node instance type"
  labelIcon={
    <PopoverHint
      hint="The instance type for the compute nodes. Instance type
    determines the amount of memory and vCPU allocated to each compute node."
    />
  }
  validated="default"
>
  <Select
    aria-describedby=""
    aria-invalid={false}
    aria-label=""
    aria-labelledby=""
    chipGroupComponent={null}
    className=""
    clearSelectionsAriaLabel="Clear all"
    createText="Create"
    customBadgeText={null}
    customContent={null}
    direction="down"
    favorites={Array []}
    favoritesLabel="Favorites"
    hasInlineFilter={false}
    hasPlaceholderStyle={false}
    inlineFilterPlaceholderText={null}
    inputAutoComplete="off"
    inputIdPrefix=""
    isCreatable={false}
    isCreateSelectOptionObject={false}
    isDisabled={false}
    isGrouped={false}
    isInputFilterPersisted={false}
    isInputValuePersisted={false}
    isOpen={false}
    isPlain={false}
    maxHeight={600}
    menuAppendTo="parent"
    noResultsFoundText="No results found"
    onClear={[Function]}
    onCreateOption={[Function]}
    onFilter={null}
    onSelect={[Function]}
    onToggle={[Function]}
    onTypeaheadInputChanged={null}
    ouiaSafe={true}
    placeholderText="Select instance type"
    position="left"
    removeSelectionAriaLabel="Remove"
    selections=""
    shouldResetOnSelect={true}
    toggleAriaLabel="Options menu"
    toggleIcon={null}
    toggleId={null}
    typeAheadAriaLabel=""
    validated="default"
    variant="single"
    width=""
  >
    <SelectGroup
      key="General purpose"
      label="General purpose"
    >
      <SelectOption
        billingModel="standard"
        className=""
        component="button"
        description="m5.xlarge"
        formValue="m5.xlarge"
        id="machineType.m5.xlarge"
        index={0}
        inputId=""
        isChecked={false}
        isDisabled={false}
        isFavorite={null}
        isLastOptionBeforeFooter={[Function]}
        isLoad={false}
        isLoading={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        key="m5.xlarge"
        keyHandler={[Function]}
        onClick={[Function]}
        product="OSD"
        sendRef={[Function]}
        setViewMoreNextIndex={[Function]}
        value="m5.xlarge"
      >
        4 vCPU 16 GiB RAM
      </SelectOption>
    </SelectGroup>
  </Select>
</FormGroup>
`;

exports[`<MachineTypeSelection /> when the machine types list is available with rhinfra quota available renders correctly 1`] = `
<FormGroup
  fieldId="node_type"
  isHelperTextBeforeField={true}
  isRequired={true}
  label="Compute node instance type"
  labelIcon={
    <PopoverHint
      hint="The instance type for the compute nodes. Instance type
    determines the amount of memory and vCPU allocated to each compute node."
    />
  }
  validated="default"
>
  <Select
    aria-describedby=""
    aria-invalid={false}
    aria-label=""
    aria-labelledby=""
    chipGroupComponent={null}
    className=""
    clearSelectionsAriaLabel="Clear all"
    createText="Create"
    customBadgeText={null}
    customContent={null}
    direction="down"
    favorites={Array []}
    favoritesLabel="Favorites"
    hasInlineFilter={false}
    hasPlaceholderStyle={false}
    inlineFilterPlaceholderText={null}
    inputAutoComplete="off"
    inputIdPrefix=""
    isCreatable={false}
    isCreateSelectOptionObject={false}
    isDisabled={false}
    isGrouped={false}
    isInputFilterPersisted={false}
    isInputValuePersisted={false}
    isOpen={false}
    isPlain={false}
    maxHeight={600}
    menuAppendTo="parent"
    noResultsFoundText="No results found"
    onClear={[Function]}
    onCreateOption={[Function]}
    onFilter={null}
    onSelect={[Function]}
    onToggle={[Function]}
    onTypeaheadInputChanged={null}
    ouiaSafe={true}
    placeholderText="Select instance type"
    position="left"
    removeSelectionAriaLabel="Remove"
    selections=""
    shouldResetOnSelect={true}
    toggleAriaLabel="Options menu"
    toggleIcon={null}
    toggleId={null}
    typeAheadAriaLabel=""
    validated="default"
    variant="single"
    width=""
  >
    <SelectGroup
      key="General purpose"
      label="General purpose"
    >
      <SelectOption
        billingModel="standard"
        className=""
        component="button"
        description="m5.xlarge"
        formValue="m5.xlarge"
        id="machineType.m5.xlarge"
        index={0}
        inputId=""
        isChecked={false}
        isDisabled={false}
        isFavorite={null}
        isLastOptionBeforeFooter={[Function]}
        isLoad={false}
        isLoading={false}
        isNoResultsOption={false}
        isPlaceholder={false}
        isSelected={false}
        key="m5.xlarge"
        keyHandler={[Function]}
        onClick={[Function]}
        product="OSD"
        sendRef={[Function]}
        setViewMoreNextIndex={[Function]}
        value="m5.xlarge"
      >
        4 vCPU 16 GiB RAM
      </SelectOption>
    </SelectGroup>
  </Select>
</FormGroup>
`;

exports[`<MachineTypeSelection /> when the request is pending renders correctly 1`] = `
<Fragment>
  <div
    className="spinner-fit-container"
  >
    <Spinner />
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading node types...
  </div>
</Fragment>
`;

exports[`<MachineTypeSelection /> when there was an error renders correctly 1`] = `
<ErrorBox
  message="Error loading node types"
  response={
    Object {
      "error": true,
      "errorMessage": "This is an error message",
      "fulfilled": false,
      "pending": false,
      "types": Object {},
      "typesByID": Object {},
    }
  }
/>
`;
