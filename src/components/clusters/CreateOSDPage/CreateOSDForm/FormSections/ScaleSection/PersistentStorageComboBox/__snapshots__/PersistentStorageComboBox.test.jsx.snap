// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PersistentStorageComboBox /> when persistent storage list needs to be fetched renders correctly 1`] = `
<PersistentStorageComboBox
  getPersistentStorage={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  persistentStorageValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "pending": false,
      "values": Array [],
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading persistent storage list...
  </div>
</PersistentStorageComboBox>
`;

exports[`<PersistentStorageComboBox /> when the request is pending renders correctly 1`] = `
<PersistentStorageComboBox
  getPersistentStorage={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  persistentStorageValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "pending": true,
      "values": Array [],
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading persistent storage list...
  </div>
</PersistentStorageComboBox>
`;

exports[`<PersistentStorageComboBox /> when the storage list is available renders correctly 1`] = `
<PersistentStorageComboBox
  getPersistentStorage={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  persistentStorageValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": true,
      "pending": false,
      "values": Array [
        Object {
          "unit": "B",
          "value": 107374182400,
        },
        Object {
          "unit": "B",
          "value": 644245094400,
        },
        Object {
          "unit": "B",
          "value": 1181116006400,
        },
      ],
    }
  }
  quota={
    Object {
      "persistentStorageQuota": 600,
    }
  }
>
  <FormSelect
    aria-label="Persistent Storage"
    className="quota-combo-box"
    isDisabled={false}
    isRequired={false}
    isValid={true}
    onBlur={[Function]}
    onChange={[MockFunction]}
    onFocus={[Function]}
    validated="default"
    value=""
  >
    <select
      aria-invalid={false}
      aria-label="Persistent Storage"
      className="pf-c-form-control quota-combo-box"
      disabled={false}
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      required={false}
      value=""
    >
      <FormSelectOption
        key="107374182400"
        label="100 GiB"
        value="107374182400"
      >
        <option
          className=""
          disabled={false}
          value="107374182400"
        >
          100 GiB
        </option>
      </FormSelectOption>
      <FormSelectOption
        key="644245094400"
        label="600 GiB"
        value="644245094400"
      >
        <option
          className=""
          disabled={false}
          value="644245094400"
        >
          600 GiB
        </option>
      </FormSelectOption>
    </select>
  </FormSelect>
</PersistentStorageComboBox>
`;

exports[`<PersistentStorageComboBox /> when there was an error renders correctly 1`] = `
<PersistentStorageComboBox
  getPersistentStorage={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  persistentStorageValues={
    Object {
      "error": true,
      "errorMessage": "This is an error message",
      "fulfilled": false,
      "pending": false,
      "values": Array [],
    }
  }
  quota={Object {}}
>
  <ErrorBox
    message="Error loading persistent storage list"
    response={
      Object {
        "error": true,
        "errorMessage": "This is an error message",
        "fulfilled": false,
        "pending": false,
        "values": Array [],
      }
    }
  >
    <Component
      className="error-box"
      isInline={true}
      title="Error loading persistent storage list"
      variant="danger"
    >
      <ComponentWithOuia
        component={[Function]}
        componentProps={
          Object {
            "children": Array [
              <span>
                This is an error message
              </span>,
              Array [],
              <br />,
              <span>
                Operation ID: N/A
              </span>,
            ],
            "className": "error-box",
            "isInline": true,
            "title": "Error loading persistent storage list",
            "variant": "danger",
          }
        }
        consumerContext={null}
      >
        <Alert
          className="error-box"
          isInline={true}
          ouiaContext={
            Object {
              "isOuia": false,
              "ouiaId": null,
            }
          }
          title="Error loading persistent storage list"
          variant="danger"
        >
          <div
            aria-label="Danger Alert"
            className="pf-c-alert pf-m-inline pf-m-danger error-box"
          >
            <AlertIcon
              variant="danger"
            >
              <div
                className="pf-c-alert__icon"
              >
                <ExclamationCircleIcon
                  color="currentColor"
                  noVerticalAlign={false}
                  size="sm"
                  title={null}
                >
                  <svg
                    aria-hidden={true}
                    aria-labelledby={null}
                    fill="currentColor"
                    height="1em"
                    role="img"
                    style={
                      Object {
                        "verticalAlign": "-0.125em",
                      }
                    }
                    viewBox="0 0 512 512"
                    width="1em"
                  >
                    <path
                      d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                      transform=""
                    />
                  </svg>
                </ExclamationCircleIcon>
              </div>
            </AlertIcon>
            <h4
              className="pf-c-alert__title"
            >
              <span
                className="pf-u-screen-reader"
              >
                Danger alert:
              </span>
              Error loading persistent storage list
            </h4>
            <div
              className="pf-c-alert__description"
            >
              <span>
                This is an error message
              </span>
              <br />
              <span>
                Operation ID: N/A
              </span>
            </div>
          </div>
        </Alert>
      </ComponentWithOuia>
    </Component>
  </ErrorBox>
</PersistentStorageComboBox>
`;
