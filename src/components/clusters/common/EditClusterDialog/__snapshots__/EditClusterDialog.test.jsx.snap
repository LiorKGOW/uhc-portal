// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EditDisplayNameDialog /> renders correctly 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <Form
    bsClass="form"
    componentClass="form"
    horizontal={true}
    inline={false}
    onSubmit={[MockFunction]}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={false}
      closeLabel="Close"
    >
      <ModalHeader
        onClose={[Function]}
        title="Edit Cluster"
      />
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Grid
        bsClass="container"
        componentClass="div"
        fluid={false}
      >
        <Row
          bsClass="row"
          componentClass="div"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <Field
              component={[Function]}
              label="Compute nodes"
              min={4}
              name="nodes_compute"
              type="number"
              validate={[Function]}
            />
          </Col>
        </Row>
        <Row
          bsClass="row"
          componentClass="div"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <FormGroup
              bsClass="form-group"
            >
              <FormSection
                component="div"
                name="network_router_shards"
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Router Shards
                </ControlLabel>
                 
                <Spinner
                  className=""
                  inline={true}
                  inverse={false}
                  loading={true}
                  size="xs"
                />
                <Col
                  bsClass="col"
                  componentClass="div"
                  sm={12}
                >
                  <Field
                    component={[Function]}
                    label=""
                    name="0.label"
                    normalize={[Function]}
                    placeholder="Label"
                    type="text"
                    validate={[Function]}
                  />
                  <Field
                    component={[Function]}
                    label=""
                    name="1.label"
                    normalize={[Function]}
                    placeholder="Label"
                    type="text"
                    validate={[Function]}
                  />
                </Col>
              </FormSection>
            </FormGroup>
          </Col>
        </Row>
      </Grid>
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Cancel
      </Button>
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={true}
        onClick={[MockFunction]}
        type="submit"
      >
        Apply
         
        <Spinner
          className=""
          inline={true}
          inverse={false}
          loading={false}
          size="xs"
        />
      </Button>
    </ModalFooter>
  </Form>
</Modal>
`;

exports[`<EditDisplayNameDialog /> renders correctly when an erorr occurs 1`] = `
<Modal
  animation={true}
  autoFocus={true}
  backdrop={true}
  bsClass="modal"
  dialogComponentClass={[Function]}
  enforceFocus={true}
  keyboard={true}
  manager={
    ModalManager {
      "add": [Function],
      "containers": Array [],
      "data": Array [],
      "handleContainerOverflow": true,
      "hideSiblingNodes": true,
      "isTopModal": [Function],
      "modals": Array [],
      "remove": [Function],
    }
  }
  onHide={[Function]}
  renderBackdrop={[Function]}
  restoreFocus={true}
  show={true}
>
  <Form
    bsClass="form"
    componentClass="form"
    horizontal={true}
    inline={false}
    onSubmit={[MockFunction]}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={false}
      closeLabel="Close"
    >
      <ModalHeader
        onClose={[Function]}
        title="Edit Cluster"
      />
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Grid
        bsClass="container"
        componentClass="div"
        fluid={false}
      >
        <Row
          bsClass="row"
          componentClass="div"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <ErrorBox
              message="Error editing cluster"
              response={
                Object {
                  "erorMessage": "this is an error",
                  "error": true,
                }
              }
            />
            <Field
              component={[Function]}
              label="Compute nodes"
              min={4}
              name="nodes_compute"
              type="number"
              validate={[Function]}
            />
          </Col>
        </Row>
        <Row
          bsClass="row"
          componentClass="div"
        >
          <Col
            bsClass="col"
            componentClass="div"
            sm={5}
          >
            <FormGroup
              bsClass="form-group"
            >
              <FormSection
                component="div"
                name="network_router_shards"
              >
                <ControlLabel
                  bsClass="control-label"
                  srOnly={false}
                >
                  Router Shards
                </ControlLabel>
                 
                <Spinner
                  className=""
                  inline={true}
                  inverse={false}
                  loading={true}
                  size="xs"
                />
                <Col
                  bsClass="col"
                  componentClass="div"
                  sm={12}
                >
                  <Field
                    component={[Function]}
                    label=""
                    name="0.label"
                    normalize={[Function]}
                    placeholder="Label"
                    type="text"
                    validate={[Function]}
                  />
                  <Field
                    component={[Function]}
                    label=""
                    name="1.label"
                    normalize={[Function]}
                    placeholder="Label"
                    type="text"
                    validate={[Function]}
                  />
                </Col>
              </FormSection>
            </FormGroup>
          </Col>
        </Row>
      </Grid>
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Cancel
      </Button>
      <Button
        active={false}
        block={false}
        bsClass="btn"
        bsStyle="primary"
        disabled={true}
        onClick={[MockFunction]}
        type="submit"
      >
        Apply
         
        <Spinner
          className=""
          inline={true}
          inverse={false}
          loading={false}
          size="xs"
        />
      </Button>
    </ModalFooter>
  </Form>
</Modal>
`;
