// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoadBalancersDropdown /> when load balancer list needs to be fetched renders correctly 1`] = `
<LoadBalancersDropdown
  getLoadBalancers={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  loadBalancerValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "pending": false,
      "values": Array [],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading load balancers list...
  </div>
</LoadBalancersDropdown>
`;

exports[`<LoadBalancersDropdown /> when the load balancer list is available renders correctly 1`] = `
<LoadBalancersDropdown
  getLoadBalancers={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  loadBalancerValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": true,
      "pending": false,
      "values": Array [
        0,
        4,
        8,
      ],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={
    Object {
      "loadBalancerQuota": 4,
    }
  }
>
  <Tooltip
    content="You do not have quota for this option. Contact sales to purchase additional quota."
    position="right"
  >
    <Popper
      appendTo={[Function]}
      distance={15}
      enableFlip={true}
      flipBehavior={
        Array [
          "top",
          "right",
          "bottom",
          "left",
          "top",
          "right",
          "bottom",
        ]
      }
      isVisible={false}
      onBlur={[Function]}
      onDocumentClick={false}
      onDocumentKeyDown={[Function]}
      onFocus={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      onTriggerEnter={[Function]}
      placement="right"
      popper={
        <div
          className="pf-c-tooltip"
          id="pf-tooltip-1"
          role="tooltip"
          style={
            Object {
              "maxWidth": null,
              "opacity": 0,
              "transition": "opacity 300ms cubic-bezier(.54, 1.5, .38, 1.11)",
            }
          }
        >
          <TooltipArrow />
          <TooltipContent
            isLeftAligned={false}
          >
            You do not have quota for this option. Contact sales to purchase additional quota.
          </TooltipContent>
        </div>
      }
      popperMatchesTriggerWidth={false}
      positionModifiers={
        Object {
          "bottom": "pf-m-bottom",
          "left": "pf-m-left",
          "right": "pf-m-right",
          "top": "pf-m-top",
        }
      }
      trigger={
        <div
          aria-describedby="pf-tooltip-1"
        >
          <FormSelect
            aria-label="Load Balancers"
            className="quota-dropdown"
            isDisabled={true}
            isRequired={false}
            onBlur={[Function]}
            onChange={[MockFunction]}
            onFocus={[Function]}
            ouiaSafe={true}
            validated="default"
            value=""
          />
        </div>
      }
      zIndex={9999}
    >
      <FindRefWrapper
        onFoundRef={[Function]}
      >
        <div
          aria-describedby="pf-tooltip-1"
        >
          <FormSelect
            aria-label="Load Balancers"
            className="quota-dropdown"
            isDisabled={true}
            isRequired={false}
            onBlur={[Function]}
            onChange={[MockFunction]}
            onFocus={[Function]}
            ouiaSafe={true}
            validated="default"
            value=""
          >
            <select
              aria-invalid={false}
              aria-label="Load Balancers"
              className="pf-c-form-control quota-dropdown"
              data-ouia-component-id={2}
              data-ouia-component-type="PF4/FormSelect"
              data-ouia-safe={true}
              disabled={true}
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              required={false}
              value=""
            />
          </FormSelect>
        </div>
      </FindRefWrapper>
    </Popper>
  </Tooltip>
</LoadBalancersDropdown>
`;

exports[`<LoadBalancersDropdown /> when the request is pending renders correctly 1`] = `
<LoadBalancersDropdown
  getLoadBalancers={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  loadBalancerValues={
    Object {
      "error": false,
      "errorMessage": "",
      "fulfilled": false,
      "pending": true,
      "values": Array [],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <div
    className="spinner-fit-container"
  >
    <Spinner>
      <div
        className="ins-c-spinner"
        role="status"
      >
        <span
          className="pf-u-screen-reader"
        >
          Loading...
        </span>
      </div>
    </Spinner>
  </div>
  <div
    className="spinner-loading-text"
  >
    Loading load balancers list...
  </div>
</LoadBalancersDropdown>
`;

exports[`<LoadBalancersDropdown /> when there was an error renders correctly 1`] = `
<LoadBalancersDropdown
  getLoadBalancers={[MockFunction]}
  input={
    Object {
      "onChange": [MockFunction],
    }
  }
  loadBalancerValues={
    Object {
      "error": true,
      "errorMessage": "This is an error message",
      "fulfilled": false,
      "pending": false,
      "values": Array [],
    }
  }
  organization={
    Object {
      "fulfilled": true,
      "pending": false,
    }
  }
  quota={Object {}}
>
  <ErrorBox
    message="Error loading load balancers list"
    response={
      Object {
        "error": true,
        "errorMessage": "This is an error message",
        "fulfilled": false,
        "pending": false,
        "values": Array [],
      }
    }
  >
    <Alert
      className="error-box"
      isInline={true}
      title="Error loading load balancers list"
      variant="danger"
    >
      <div
        aria-label="Danger Alert"
        className="pf-c-alert pf-m-inline pf-m-danger error-box"
        data-ouia-component-id={0}
        data-ouia-component-type="PF4/Alert"
        data-ouia-safe={true}
      >
        <Component
          variant="danger"
        >
          <div
            className="pf-c-alert__icon"
          >
            <ExclamationCircleIcon
              color="currentColor"
              noVerticalAlign={false}
              size="sm"
            >
              <svg
                aria-hidden={true}
                aria-labelledby={null}
                fill="currentColor"
                height="1em"
                role="img"
                style={
                  Object {
                    "verticalAlign": "-0.125em",
                  }
                }
                viewBox="0 0 512 512"
                width="1em"
              >
                <path
                  d="M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"
                  transform=""
                />
              </svg>
            </ExclamationCircleIcon>
          </div>
        </Component>
        <h4
          className="pf-c-alert__title"
        >
          <span
            className="pf-u-screen-reader"
          >
            Danger alert:
          </span>
          Error loading load balancers list
        </h4>
        <div
          className="pf-c-alert__description"
        >
          <span>
            This is an error message
          </span>
          <br />
          <span>
            Operation ID: N/A
          </span>
        </div>
      </div>
    </Alert>
  </ErrorBox>
</LoadBalancersDropdown>
`;
