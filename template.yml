#
# Copyright (c) 2018 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file contains an OpenShift template that creates all the objects needed
# for a working installation of the application. See the `template.sh` file for
# an example of how to use it.

---

apiVersion: v1
kind: Template
metadata:
  name: unified-hybrid-cloud-portal
  annotations:
    description: "Unified Hybrid Cloud Portal"

parameters:

- name: BUILD_ID
  description: The identifier of the build.

- name: BUILD_TS
  description: The timestamp of the build.

- name: GATEWAY_DOMAIN
  description: The DNS domain where the API gateway is deployed.

- name: PORTAL_DOMAIN
  description: The DNS domain where the portal will be deployed.

- name: IMAGE_PULL_POLICY
  description: Image pull policy.

- name: IMAGE_TAG
  description: Tag of the image, including the registry and the version.

- name: NAMESPACE
  description: The namespace where the objects will be created.

- name: KEYCLOAK_URL
  description: The Keycloak base URL.

- name: KEYCLOAK_REALM
  description: The Keycloak realm.

- name: KEYCLOAK_CLIENT_ID
  description: The Keycloak client identifier.

- name: VERSION
  description: The version of the project.

- name: INSTALLER_URL
  description: The URL to download the installer.

objects:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: portal-config
  data:

    httpd.conf: |-
      # Set the server root:
      ServerRoot /etc/httpd

      # Explicilty set the server name, otherwise the web server will use
      # the IP address of the pod:
      ServerName ${PORTAL_DOMAIN}

      # Listen in a non privileged port, as we will be running wit a non
      # privileged user:
      Listen 8000

      # The default location of the PID file isn't readable by the user that
      # runs the container, so we need to put it in a different place:
      PidFile /var/tmp/httpd.pid

      # Load modules:
      LoadModule mpm_event_module /usr/lib64/httpd/modules/mod_mpm_event.so
      LoadModule unixd_module /usr/lib64/httpd/modules/mod_unixd.so
      LoadModule dir_module /usr/lib64/httpd/modules/mod_dir.so
      LoadModule log_config_module /usr/lib64/httpd/modules/mod_log_config.so
      LoadModule authn_core_module /usr/lib64/httpd/modules/mod_authn_core.so
      LoadModule authz_core_module /usr/lib64/httpd/modules/mod_authz_core.so
      LoadModule rewrite_module /usr/lib64/httpd/modules/mod_rewrite.so

      # Deny access to all the file system:
      <Directory />
        AllowOverride none
        Require all denied
      </Directory>

      # Allow access to the documents directory:
      DocumentRoot /var/www/html
      <Directory /var/www/html>
        AllowOverride None

        # Allow access to everyone:
        Require all granted

        # Redirect all requests for files or directories that don't exist to the
        # index page of the application:
        RewriteEngine On
        RewriteBase /
        RewriteRule ^index\.html$ - [L]
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_FILENAME} !-l
        RewriteRule . /index.html [L]
      </Directory>

      # Send the logs to the standard output:
      LogLevel warn
      ErrorLog /dev/stdout
      TransferLog /dev/stdout

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: webapp-config
  data:
    config.json: |-
      {
        "apiGateway": "https://${GATEWAY_DOMAIN}",
        "keycloak": {
          "realm": "${KEYCLOAK_REALM}",
          "clientId": "${KEYCLOAK_CLIENT_ID}",
          "url": "${KEYCLOAK_URL}"
        },
        "installerURL": "${INSTALLER_URL}"
      }

- apiVersion: apps/v1beta1
  kind: Deployment
  metadata:
    name: portal-server
    labels:
      app: portal-server
  spec:
    selector:
      matchLabels:
        app: portal-server
    replicas: 1
    template:
      metadata:
        labels:
          app: portal-server
      spec:
        volumes:
        - name: config
          configMap:
            name: portal-config
            items:
            - key: httpd.conf
              path: conf/httpd.conf
        - name: webapp-config
          configMap:
            name: webapp-config
        initContainers:
        - name: id
          image: centos:7
          command:
          - echo
          - ${VERSION}-${BUILD_ID}-${BUILD_TS}
        containers:
        - name: server
          image: ${IMAGE_TAG}
          imagePullPolicy: ${IMAGE_PULL_POLICY}
          volumeMounts:
          - name: config
            mountPath: /etc/httpd
          - name: webapp-config
            mountPath: /var/www/html/config
          command:
          - /usr/sbin/httpd
          args:
          - -D
          - FOREGROUND

- apiVersion: v1
  kind: Service
  metadata:
    name: portal-server
    labels:
      app: portal-server
  spec:
    selector:
      app: portal-server
    ports:
    - port: 8000
      targetPort: 8000
